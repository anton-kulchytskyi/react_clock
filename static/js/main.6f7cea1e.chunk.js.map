{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["Clock","timerId","setInterval","state","time","Date","this","setState","console","log","toLocaleTimeString","oldName","name","props","clearInterval","React","Component","App","isClockVisible","clockName","createRandomName","Math","round","random","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"8MAUaA,EAAb,4MACEC,QAAwBC,aAAY,cAAU,GADhD,EAGEC,MAAQ,CACNC,KAAM,IAAIC,MAJd,uDAOE,WAAqB,IAAD,OAClBC,KAAKL,QAAUC,aAAY,WACzB,EAAKK,SAAS,CACZH,KAAM,IAAIC,OAGZG,QAAQC,IAAI,EAAKN,MAAMC,KAAKM,wBAC3B,OAdP,gCAiBE,YAA8C,IAAnBC,EAAkB,EAAxBC,KACXA,EAASN,KAAKO,MAAdD,KAEJD,IAAYC,GAEdJ,QAAQC,IAAR,qCAA0CE,EAA1C,eAAwDC,MAtB9D,kCA0BE,WACEE,cAAcR,KAAKL,WA3BvB,oBA8BE,WACE,IAAQG,EAASE,KAAKH,MAAdC,KAER,OACE,qCACE,4BACG,mBAEH,4BACGA,EAAKM,8BAvChB,GAA2BK,IAAMC,WCDpBC,G,MAAb,4MACEd,MAAQ,CACNe,gBAAgB,EAChBC,UAAW,GAHf,EAMEC,iBAAmB,WACb,EAAKjB,MAAMe,gBACb,EAAKX,SAAS,CACZY,UAAWE,KAAKC,MAAsB,IAAhBD,KAAKE,aATnC,4CAcE,WAAU,IAAD,OACP,EAAsCjB,KAAKH,MAAnCe,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,UAExB,OACE,sBAAKK,UAAU,eAAf,UACE,6CAEEN,GAAkB,cAAC,EAAD,CAAON,KAAMO,IAEjC,sBAAKK,UAAU,UAAf,UACE,wBACEA,UAAU,cACVC,KAAK,SACLC,QAAS,kBAAM,EAAKnB,SAAS,CAAEW,gBAAgB,KAHjD,kBAOA,wBACEM,UAAU,cACVC,KAAK,SACLC,QAAS,kBAAM,EAAKnB,SAAS,CAAEW,gBAAgB,KAHjD,qBASAA,GACA,wBACEM,UAAU,gBACVC,KAAK,SACLC,QAASpB,KAAKc,iBAHhB,oCAzCV,GAAyBL,IAAMC,YCN/BW,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6f7cea1e.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  time: Date;\n};\n\ntype Props = {\n  name: number;\n};\n\nexport class Clock extends React.Component<Props, State> {\n  timerId: NodeJS.Timer = setInterval(() => {}, 0);\n\n  state = {\n    time: new Date(),\n  };\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      this.setState({\n        time: new Date(),\n      });\n      // eslint-disable-next-line\n      console.log(this.state.time.toLocaleTimeString());\n    }, 1000);\n  }\n\n  componentDidUpdate({ name: oldName }: Props) {\n    const { name } = this.props;\n\n    if (oldName !== name) {\n      // eslint-disable-next-line\n      console.log(`The Clock was renamed from ${oldName} to ${name}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const { time } = this.state;\n\n    return (\n      <>\n        <p>\n          {'Current time: '}\n        </p>\n        <p>\n          {time.toLocaleTimeString()}\n        </p>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Clock } from './Clock';\nimport './App.scss';\n\ntype State = {\n  isClockVisible: boolean;\n  clockName: number;\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isClockVisible: true,\n    clockName: 0,\n  };\n\n  createRandomName = () => {\n    if (this.state.isClockVisible) {\n      this.setState({\n        clockName: Math.round(Math.random() * 1000),\n      });\n    }\n  };\n\n  render() {\n    const { isClockVisible, clockName } = this.state;\n\n    return (\n      <div className=\"clock__block\">\n        <h1>React clock</h1>\n\n        { isClockVisible && <Clock name={clockName} /> }\n\n        <div className=\"buttons\">\n          <button\n            className=\"show button\"\n            type=\"button\"\n            onClick={() => this.setState({ isClockVisible: true })}\n          >\n            Show\n          </button>\n          <button\n            className=\"hide button\"\n            type=\"button\"\n            onClick={() => this.setState({ isClockVisible: false })}\n          >\n            Hide\n          </button>\n        </div>\n\n        { isClockVisible && (\n          <button\n            className=\"random button\"\n            type=\"button\"\n            onClick={this.createRandomName}\n          >\n            Set random name\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}