{"version":3,"sources":["Clock.tsx","App.tsx","index.tsx"],"names":["Clock","name","useState","Date","time","setTime","useEffect","timerId","setInterval","date","console","log","toLocaleTimeString","clearInterval","oldName","value","ref","useRef","current","usePrevious","App","clockName","setClockName","isClockVisible","setIsClockVisible","className","type","onClick","Math","round","random","ReactDOM","render","document","getElementById"],"mappings":"uLA0EaA,EAAyB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvC,EAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACR,IAAMC,EAAUC,uBAAY,WAC1B,IAAMC,EAAO,IAAIN,KAEjBE,EAAQI,GAERC,QAAQC,IAAIF,EAAKG,wBAChB,KAEH,OAAO,kBAAMC,cAAcN,MAC1B,IAEH,IAAMO,EAzBY,SAAoBC,GACtC,IAAMC,EAAMC,mBAMZ,OAJAX,qBAAU,WACRU,EAAIE,QAAUH,KAGTC,EAAIE,QAkBKC,CAAYlB,GAS5B,OAPAK,qBAAU,WACJQ,IAAYb,GAEdS,QAAQC,IAAR,qCAA0CG,EAA1C,eAAwDb,MAEzD,CAACA,IAGF,qCACE,4BACG,mBAEH,4BACGG,EAAKQ,2BCnCDQ,G,MAAgB,WAC3B,MAAkClB,mBAAS,GAA3C,mBAAOmB,EAAP,KAAkBC,EAAlB,KACA,EAA4CpB,oBAAS,GAArD,mBAAOqB,EAAP,KAAuBC,EAAvB,KAQA,OACE,sBAAKC,UAAU,eAAf,UACE,6CAEEF,GAAkB,cAAC,EAAD,CAAOtB,KAAMoB,IAEjC,sBAAKI,UAAU,UAAf,UACE,wBACEA,UAAU,cACVC,KAAK,SACLC,QAAS,kBAAMH,GAAkB,IAHnC,kBAOA,wBACEC,UAAU,cACVC,KAAK,SACLC,QAAS,kBAAMH,GAAkB,IAHnC,qBASAD,GACA,wBACEE,UAAU,gBACVC,KAAK,SACLC,QAjCiB,WACnBJ,GACFD,EAAaM,KAAKC,MAAsB,IAAhBD,KAAKE,YA4B3B,kCCpGRC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c9e8199e.chunk.js","sourcesContent":["// import React from 'react';\n\n// type State = {\n//   time: Date;\n// };\n\n// type Props = {\n//   name: number;\n// };\n\n// export class Clock extends React.Component<Props, State> {\n//   timerId: NodeJS.Timer = setInterval(() => {}, 0);\n\n//   state = {\n//     time: new Date(),\n//   };\n\n//   componentDidMount() {\n//     this.timerId = setInterval(() => {\n//       this.setState({\n//         time: new Date(),\n//       });\n//       // eslint-disable-next-line\n//       console.log(this.state.time.toLocaleTimeString());\n//     }, 1000);\n//   }\n\n//   componentDidUpdate({ name: oldName }: Props) {\n//     const { name } = this.props;\n\n//     if (oldName !== name) {\n//       // eslint-disable-next-line\n//       console.log(`The Clock was renamed from ${oldName} to ${name}`);\n//     }\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.timerId);\n//   }\n\n//   render() {\n//     const { time } = this.state;\n\n//     return (\n//       <>\n//         <p>\n//           {'Current time: '}\n//         </p>\n//         <p>\n//           {time.toLocaleTimeString()}\n//         </p>\n//       </>\n//     );\n//   }\n// }\n\n// -----------with hooks ------ //\nimport React, { useEffect, useState, useRef } from 'react';\nimport { setInterval } from 'timers';\n\ntype Props = {\n  name: number;\n};\n\nconst usePrevious = <T extends unknown>(value: T): T | undefined => {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n};\n\nexport const Clock: React.FC<Props> = ({ name }) => {\n  const [time, setTime] = useState(new Date());\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      const date = new Date();\n\n      setTime(date);\n      // eslint-disable-next-line\n      console.log(date.toLocaleTimeString());\n    }, 1000);\n\n    return () => clearInterval(timerId);\n  }, []);\n\n  const oldName = usePrevious(name);\n\n  useEffect(() => {\n    if (oldName !== name) {\n      // eslint-disable-next-line\n      console.log(`The Clock was renamed from ${oldName} to ${name}`);\n    }\n  }, [name]);\n\n  return (\n    <>\n      <p>\n        {'Current time: '}\n      </p>\n      <p>\n        {time.toLocaleTimeString()}\n      </p>\n    </>\n  );\n};\n","// import React from 'react';\n// import { Clock } from './Clock';\n// import './App.scss';\n\n// type State = {\n//   isClockVisible: boolean;\n//   clockName: number;\n// };\n\n// export class App extends React.Component<{}, State> {\n//   state = {\n//     isClockVisible: true,\n//     clockName: 0,\n//   };\n\n//   createRandomName = () => {\n//     if (this.state.isClockVisible) {\n//       this.setState({\n//         clockName: Math.round(Math.random() * 1000),\n//       });\n//     }\n//   };\n\n//   render() {\n//     const { isClockVisible, clockName } = this.state;\n\n//     return (\n//       <div className=\"clock__block\">\n//         <h1>React clock</h1>\n\n//         { isClockVisible && <Clock name={clockName} /> }\n\n//         <div className=\"buttons\">\n//           <button\n//             className=\"show button\"\n//             type=\"button\"\n//             onClick={() => this.setState({ isClockVisible: true })}\n//           >\n//             Show\n//           </button>\n//           <button\n//             className=\"hide button\"\n//             type=\"button\"\n//             onClick={() => this.setState({ isClockVisible: false })}\n//           >\n//             Hide\n//           </button>\n//         </div>\n\n//         { isClockVisible && (\n//           <button\n//             className=\"random button\"\n//             type=\"button\"\n//             onClick={this.createRandomName}\n//           >\n//             Set random name\n//           </button>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// ----------------------------- with hooks -----------------//\n\nimport React, { useState } from 'react';\nimport { Clock } from './Clock';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  const [clockName, setClockName] = useState(0);\n  const [isClockVisible, setIsClockVisible] = useState(true);\n\n  const createRandomName = () => {\n    if (isClockVisible) {\n      setClockName(Math.round(Math.random() * 1000));\n    }\n  };\n\n  return (\n    <div className=\"clock__block\">\n      <h1>React clock</h1>\n\n      { isClockVisible && <Clock name={clockName} /> }\n\n      <div className=\"buttons\">\n        <button\n          className=\"show button\"\n          type=\"button\"\n          onClick={() => setIsClockVisible(true)}\n        >\n          Show\n        </button>\n        <button\n          className=\"hide button\"\n          type=\"button\"\n          onClick={() => setIsClockVisible(false)}\n        >\n          Hide\n        </button>\n      </div>\n\n      { isClockVisible && (\n        <button\n          className=\"random button\"\n          type=\"button\"\n          onClick={createRandomName}\n        >\n          Set random name\n        </button>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}